name: Deploy to AWS ECS

on:
  push:
    tags:
      - '20*v*'  # 20250712v1 のような形式
      - 'v*.*.*'  # v1.0.0 のような形式（従来形式も対応）

env:
  AWS_REGION: ap-northeast-1
  ECR_FRONTEND_REPOSITORY: 945098287150.dkr.ecr.ap-northeast-1.amazonaws.com/aikinote-frontend
  ECR_BACKEND_REPOSITORY: 945098287150.dkr.ecr.ap-northeast-1.amazonaws.com/aikinote-backend
  ECS_CLUSTER: aikinote-cluster-dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Get version from tag
      id: version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "VERSION=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Deploying version: $TAG_NAME"
    
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Frontend Docker image
      run: |
        docker build \
          --platform linux/amd64 \
          --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
          --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
          -t $ECR_FRONTEND_REPOSITORY:${{ steps.version.outputs.VERSION }} \
          -t $ECR_FRONTEND_REPOSITORY:latest \
          ./frontend

    - name: Build Backend Docker image
      run: |
        docker build \
          --platform linux/amd64 \
          --build-arg SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
          --build-arg SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -t $ECR_BACKEND_REPOSITORY:${{ steps.version.outputs.VERSION }} \
          -t $ECR_BACKEND_REPOSITORY:latest \
          ./backend

    - name: Push images to Amazon ECR
      run: |
        docker push $ECR_FRONTEND_REPOSITORY:${{ steps.version.outputs.VERSION }}
        docker push $ECR_FRONTEND_REPOSITORY:latest
        docker push $ECR_BACKEND_REPOSITORY:${{ steps.version.outputs.VERSION }}
        docker push $ECR_BACKEND_REPOSITORY:latest

    - name: Update ECS Task Definitions
      run: |
        # Frontend task definition update
        FRONTEND_TASK_DEF=$(aws ecs describe-task-definition --task-definition aikinote-frontend-dev --query 'taskDefinition' --output json)
        echo $FRONTEND_TASK_DEF | jq --arg IMAGE "$ECR_FRONTEND_REPOSITORY:${{ steps.version.outputs.VERSION }}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' > frontend-task-def.json
        
        # Backend task definition update
        BACKEND_TASK_DEF=$(aws ecs describe-task-definition --task-definition aikinote-backend-dev --query 'taskDefinition' --output json)
        echo $BACKEND_TASK_DEF | jq --arg IMAGE "$ECR_BACKEND_REPOSITORY:${{ steps.version.outputs.VERSION }}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' > backend-task-def.json
        
        # Register new task definitions
        aws ecs register-task-definition --cli-input-json file://frontend-task-def.json
        aws ecs register-task-definition --cli-input-json file://backend-task-def.json

    - name: Deploy to ECS services
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service aikinote-frontend-dev --task-definition aikinote-frontend-dev --force-new-deployment
        aws ecs update-service --cluster $ECS_CLUSTER --service aikinote-backend-dev --task-definition aikinote-backend-dev --force-new-deployment
        
        # Wait for deployments to complete
        echo "Waiting for frontend deployment to complete..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services aikinote-frontend-dev
        
        echo "Waiting for backend deployment to complete..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services aikinote-backend-dev
        
        echo "🚀 Deployed version ${{ steps.version.outputs.VERSION }} to production successfully!"
