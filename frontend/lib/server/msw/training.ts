// 稽古ページデータの型定義
export type TrainingPageData = {
	id: string;
	title: string;
	content: string;
	date: string;
	tags: string[]; // 表示用では名前で保持、バックエンド連携時はIDに変換
};

// タグマッピング（ID → 名前）
const _tagIdToNameMap: Record<string, string> = {
	"1": "立技",
	"2": "坐技",
	"3": "半身半立",
	"4": "相半身",
	"5": "逆半身",
	"6": "後ろ",
	"7": "片手取り",
	"8": "諸手取り",
	"9": "両手取り",
	"10": "袖取り",
	"11": "肩取り",
	"12": "肩取り面打ち",
	"13": "正面打ち",
	"14": "横面打ち",
	"15": "突き",
	"16": "一教",
	"17": "二教",
	"18": "三教",
	"19": "四教",
	"20": "五教",
	"21": "入身投げ",
	"22": "四方投げ",
	"23": "小手返し",
	"24": "回転投げ",
};

// モック稽古ページデータ（表示用に名前で保持）
const mockTrainingPageData: TrainingPageData[] = [
	{
		id: "1",
		title: "2025-09-09 10月の審査に向けて",
		content:
			"初級者の審査に向けて、正面打ち〜一教や入身投げが中心の稽古だった。受けも取りも、手刀を維持したまま体捌きを意識し、相手との接点を大切にしながら技をかけるように心がけた。\n\n特に一教では、相手の力に逆らわず、自分の中心を保ちながら相手を導くことの重要性を再認識した。入身投げも同様で、相手の動きに合わせて自然な流れで投げることができれば、力を使わずに技が決まることを実感した。",
		date: "2025-09-09",
		tags: ["一教", "立技", "正面打ち"],
	},
	{
		id: "2",
		title: "2025-09-17 剣の理合いを意識する",
		content:
			"逆半身の一教など一部例外はあれど、基本的にどんな技をするときにも「手刀」の形を維持する。そして剣対剣・剣対杖の動きを意識し、いつでも切れる（当て身が入る）が切らないように相手を導くように手刀を使う。\n\n正面打ち 小手返し\n・相手との接点・繋がりを保つため、外転換するときに目線を外したりせずしっかり自分の中心で相手を崩す\n・角度も大事、相手の腕が伸びるように（相手の重心が崩れるように）重心移動し、最後まで自分の中心に収めることを意識する\n\n三教の極め\n・相手の肘が真っ直ぐ上に立ち、自分の中心から相手の肘までが1本の線になるようにして極める\n\n三教の極めに移る前に、相手の手首や掌の外側ではなくちゃんと小指を引っ掛けて持つことを意識していきたい。持つ部分が数センチずれるだけで技が効きにくくなる。",
		date: "2025-09-17",
		tags: ["三教", "四教", "立技", "正面打ち", "横面打ち", "小手返し"],
	},
	{
		id: "3",
		title: "2025-09-21",
		content:
			"初級者の審査に向けて、正面打ち→一教や入身投げが中心の稽古だった。受けも取りも、手刀を維持したまま体捌きを意識し、相手との接点を大切にしながら技をかけるように心がけた。\n\n今日は特に呼吸法と姿勢について指導を受けた。正しい呼吸と姿勢があってこそ、技が生きてくることを改めて学んだ。",
		date: "2025-09-21",
		tags: ["一教", "立技", "正面打ち", "入身投げ"],
	},
];

/**
 * モック稽古ページデータを取得する関数
 * @returns Promise<TrainingPageData[]> 稽古ページデータの配列
 */
export async function mockGetTrainingPageData(): Promise<TrainingPageData[]> {
	// 実際のAPIコールをシミュレートするため、少しの遅延を追加
	await new Promise((resolve) => setTimeout(resolve, 100));

	return mockTrainingPageData;
}

/**
 * IDで特定の稽古ページデータを取得する関数
 * @param id 稽古ページのID
 * @returns Promise<TrainingPageData | null> 稽古ページデータまたはnull
 */
export async function mockGetTrainingPageDataById(
	id: string,
): Promise<TrainingPageData | null> {
	// 実際のAPIコールをシミュレートするため、少しの遅延を追加
	await new Promise((resolve) => setTimeout(resolve, 100));

	const page = mockTrainingPageData.find((page) => page.id === id);
	return page || null;
}
